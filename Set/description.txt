整数集合是有序数列，排列顺序是从小到大，且不能重复。
给定A、B两个集合，求出它们的的交集、并集和差集。
要求用数组类派生。 
class Array {
protected:
    int *arr;
    unsigned int nSize;
    void expand(unsigned int offset) {
        int *p = new int [nSize + offset];
        if (arr != NULL) {
            for (unsigned int i = 0; i < nSize; ++i) {
                p[i] = arr[i];
            }
            delete [] arr;
        }
        arr = p;
        nSize += offset;
    }
public:
    Array(unsigned int n) {
        if (0 == n) {
            nSize = 0;
            arr = NULL;
        }
        else {
            nSize = n;
            arr = new int [nSize];
        }
    }
    Array(const Array& obj) {
        if (NULL == obj.arr) {
            nSize = 0;
            arr = NULL;
        }
        else {
            nSize = obj.nSize;
            arr = new int[nSize];
            for (unsigned int i = 0; i < nSize; ++i) {
                arr[i] = obj.arr[i];
            }
        }
    }
    ~Array() {
        if (NULL != arr) {
            delete [] arr;
            nSize = 0;
        }
    }
    int& operator[](unsigned int index) {
        if (index >= nSize) {
            expand(index - nSize + 1);
        }
        return arr[index];
    }
    int operator[](unsigned int index) const {
        if (index < nSize) {
            return arr[index];
        }
        return 0;
    }
    Array& operator=(const Array& obj) {
        if (this == &obj)
            return *this;

        if (NULL != arr)
            delete [] arr;

        if (NULL == obj.arr) {
            nSize = obj.nSize;
            arr = NULL;
            return *this;
        }

        nSize = obj.nSize;
        arr = new int[nSize];
        for (unsigned int i = 0; i < nSize; ++i)
            arr[i] = obj.arr[i];
        return *this;
    }
};
class Set : protected Array {

...
};
主程序如下：
int main() {
  int m, n, x;
  Set a, b, c, d, e;
  cin >> m;
  for (int i = 0; i < m; ++i)  {
    cin >> x;
    a.insert(x);
  }
  cin >> n;
  for (int i = 0; i < n; ++i)  {
    cin >> x;
    b.insert(x);
  }
  a.display();
  b.display();
  c = a + b;
  d = a * b;
  e = a - b;
  c.display();
  d.display();
  e.display();
  return 0;
}

io：
5
3 1 5 4 2
6
10 2 6 4 8 2

1 2 3 4 5 
2 4 6 8 10
1 2 3 4 5 6 8 10
2 4
1 3 5